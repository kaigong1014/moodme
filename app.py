import streamlit as st
import pandas as pd
from transformers import pipeline
import time


# -------------------------------------------- Functions --------------------------------------------# 
    
def load_model(option, data):

    if option == 'Sentiment Analysis':

        # loads the model 
        pipe = pipeline("text-classification", model="Elisa/test-trainer")

        with st.spinner('Analyzing... Please wait.'):
            
            # Display the spinner for 1 sec  
            time.sleep(1)

            # Deals with the data that is coming. Input on the st.text_input is in string format.
            # Need to split into the separator mentioned, and transform into a list so that can be passed to the pipeline
            # "sentence1; sentence2" from the user will be [sentence1, sentence2]
            input_from_user = list(data.split(';'))
            
            # calculates sentiment using the pipeline object from HuggingFace
            calculations = pipe(input_from_user) 

        # displays it better
        for idx,i in enumerate(calculations):

            if i['label'] == 'LABEL_0':
                label_fixed = 'Negative'
            else:
                label_fixed = 'Positive'

            score_round = round(i["score"],3)

            st.info(f'**Sentiment**: {label_fixed} \n\n **Score**: {score_round}')

    elif option == 'Text Summarization':

        # loads the model 
        # Use a pipeline as a high-level helper
        pipe = pipeline("text2text-generation", model="Kai1014/t5_sum_finetuned")
        
        # large model
        # pipe = pipeline("summarization", model="google/pegasus-cnn_dailymail")

        with st.spinner('Analyzing... Please wait.'):
            
            # Just to serve as a visual feedback to the user so they know the program is running, in case it gets too fast. 
            time.sleep(1)
            
            # joins user input with summarize command - demanded by the model when we trained 
            user_input = 'summarize: '+ data 

            # calls the summarization on the data provided by the user using the pipeline
            # max_new_token controls the no of tokens generated by the summarizer. The default is 20 and if kept, output is truncated
            summarization = pipe(user_input,max_new_tokens=300) 

            st.info(f"**Summarization**: \n\n {summarization[0]['generated_text']}")

    elif option == 'Mask/No mask Detection':
        # loads the model 
        # Use a pipeline as a high-level helper
        pipe = pipeline("image-classification", model="Kai1014/vit_finetune_mask")

        # url examples:
        # https://img.freepik.com/free-photo/close-up-brunette-woman-looking-camera-gray_171337-1000.jpg?w=1380&t=st=1711566864~exp=1711567464~hmac=8eefec951adec38ddbc7a3d3ac11c282fc180021ce3fd92f6a4bb1d0776b84ea
        # https://media.istockphoto.com/id/1310896477/photo/man-wearing-medical-mask-showing-the-thumbs-up.jpg?s=612x612&w=0&k=20&c=tiGSUBm4wrzZ-MABftFPfqtsHzfIGqniFhzzC0383sk=


        with st.spinner('Analyzing... Please wait.'):
            
            # Display the spinner for 1 sec  
            time.sleep(1)
            
            # calculates sentiment using the pipeline object from HuggingFace
            calculations = pipe(data) 
    
            output=""
            for item in calculations:
                label = item['label'].replace('_', ' ').capitalize()
                score = round(item['score'], 3)
                output += f"**{label}** - score: {score:.3f}\n\n"
            
            st.image(data)
            st.info(output)


# -------------------------------------------- App --------------------------------------------# 

# general config of page. The sidebard with instructions is expanded by default even on mobile.
# layout="centered" or "wide"
# initial_sidebar_state = "expanded", "auto" or "collapsed"
st.set_page_config(layout="centered",initial_sidebar_state = 'expanded') 

# Title of the app
st.title("ü§ñ Welcome to the AI Hub!")

# Sidebar 
with st.sidebar:
    st.header("How to use this app")
    st.write("Select a task you want to perform and upload the data or text. Once you hit 'Run', the task you want will be performed using the relevant AI model! \n\n Enjoy!")
    st.sidebar.info("Want to know more about this recommender and how I built it? Access the [GitHub repo](https://github.com/kaigong1014)",icon="‚ÑπÔ∏è")


# Task Selection
task_selection = st.selectbox(
                                label='Select a task',
                                options=['Sentiment Analysis', 'Text Summarization', 'Mask/No mask Detection'],
                                index=None
                            )

# Changes the font size of the selectbox label. 'Select a task' is larger than default.
st.markdown(
            """<style>
            div[class*="stSelectbox"] > label > div[data-testid="stMarkdownContainer"] > p {
                font-size: 27px;
            }
                </style>
            """, 
            unsafe_allow_html=True
            )


if task_selection == 'Sentiment Analysis':
    # code for sentiment analysis
    #st.write(f'You chose {option}')
    user_input = st.text_input('Type a sentence so the model can analyze the sentiment. If you want to provide more than one sentence, separate them by ";"')
    
    # Changes the font size of the instructions before the text.
    st.markdown(
                """<style>
                div[class*="stTextInput"] > label > div[data-testid="stMarkdownContainer"] > p {
                    font-size: 21px;
                }
                    </style>
                """, 
                unsafe_allow_html=True)
    
    # Show a Run button
    run_btn= st.button('Run')

    # If the button is clicked, then start running the model. If not clicked, nothing happens
    if run_btn:
        load_model(option=task_selection, data=user_input)

elif task_selection == 'Text Summarization':
    user_input = st.text_area('Type a sentence to be summarized. Please, type only one sentence.',max_chars=None)
    
    # Changes the font size of the instructions before the text.
    st.markdown(
                """<style>
                div[class*="stTextArea"] > label > div[data-testid="stMarkdownContainer"] > p {
                    font-size: 21px;
                }
                    </style>
                """, 
                unsafe_allow_html=True)
    
    # Show a Run button
    run_btn= st.button('Run')

    # If the button is clicked, then start running the model. If not clicked, nothing happens
    if run_btn:
        load_model(option=task_selection, data=user_input)

elif task_selection == 'Mask/No mask Detection':
    # code for face detection
    
    user_input = st.text_input('Paste a url link to an image you want to check')
    #user_input = st.file_uploader('Upload an image', type=['png', 'jpg'])

    st.markdown(
                """<style>
                div[class*="stTextInput"] > label > div[data-testid="stMarkdownContainer"] > p {
                    font-size: 21px;
                }
                    </style>
                """, 
                unsafe_allow_html=True)
    
    # Show a Run button
    run_btn= st.button('Run')

    # If the button is clicked, then start running the model. If not clicked, nothing happens
    if run_btn:
        load_model(option=task_selection, data=user_input)

